# main.py

import os
import logging
import threading
import datetime
import time
import random
import pytz
import functools
import requests
from deep_translator import GoogleTranslator  # –ò—Å–ø–æ–ª—å–∑—É–µ–º deep-translator –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞

import telebot
from telebot import types  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from dotenv import load_dotenv
from pathlib import Path
from models import Session, User, Admin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å–µ—Å—Å–∏–∏ requests —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

session_requests = requests.Session()
retries = Retry(total=5, backoff_factor=1, status_forcelist=[502, 503, 504])
adapter = HTTPAdapter(max_retries=retries)
session_requests.mount("https://", adapter)
session_requests.mount("http://", adapter)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
env_path = Path(__file__).parent / ".env"
load_dotenv(dotenv_path=env_path)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TOKEN, request_session=session_requests)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
active_threads = {}


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def error_handler(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {str(e)}", exc_info=True)

    return wrapper


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user(chat_id):
    session_db = Session()
    try:
        user = session_db.query(User).filter_by(chat_id=chat_id).first()
        if not user:
            user = User(chat_id=chat_id)
            session_db.add(user)
            session_db.commit()
        return user
    finally:
        session_db.close()


def is_valid_time(time_str):
    try:
        datetime.datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False


# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
texts = {
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å –≤–æ–¥—É!",
        "reminder": "üíß –ü–æ—Ä–∞ –≤—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã!",
        "fact": "–õ–æ–≤–∏ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:",
        "help": ("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
                 "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                 "/help - –°–ø—Ä–∞–≤–∫–∞\n"
                 "/fact - –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n"
                 "/language - –°–º–µ–Ω–∞ —è–∑—ã–∫–∞\n"
                 "/set_time - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è\n"
                 "/set_timezone - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å\n"
                 "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        "language_changed": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π",
        "time_updated": "‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        "invalid_time": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú)",
        "facts": [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –ß–µ–ª–æ–≤–µ–∫ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∞—Ç–∏—Ç –Ω–∞ –∂–µ–≤–∞–Ω–∏–µ, —á–µ–º –Ω–∞ —Å–æ–Ω.",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –ú—ë–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è.",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –£ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Ö —Ç–µ–ª–∞."
        ],
    },
    "en": {
        "welcome": "Hello! I will remind you to drink water!",
        "reminder": "üíß Time to drink water!",
        "fact": "Random fact:",
        "help": ("Commands:\n"
                 "/start - Start bot\n"
                 "/help - Help\n"
                 "/fact - Random fact\n"
                 "/language - Change language\n"
                 "/set_time - Set schedule\n"
                 "/set_timezone - Set timezone\n"
                 "/menu - Main menu"),
        "language_changed": "Language changed to English",
        "time_updated": "‚è∞ Schedule updated!",
        "invalid_time": "‚ùå Invalid time format (use HH:MM)",
        "facts": [
            "Interesting fact: A human spends more time chewing than sleeping.",
            "Interesting fact: Honey never spoils.",
            "Interesting fact: Every person has a unique body odor."
        ],
    }
}


@bot.message_handler(commands=['set_timezone'])
@error_handler
def set_timezone_handler(message):
    chat_id = message.chat.id
    args = message.text.split()[1:]
    if not args:
        bot.send_message(chat_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/London)")
        return
    timezone_str = args[0]
    if timezone_str not in pytz.all_timezones:
        bot.send_message(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow")
        return
    session_db = Session()
    try:
        user = session_db.query(User).filter_by(chat_id=chat_id).first()
        if not user:
            user = User(chat_id=chat_id, timezone=timezone_str)
            session_db.add(user)
        else:
            user.timezone = timezone_str
        session_db.commit()
        bot.send_message(chat_id, f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {timezone_str}")
    finally:
        session_db.close()


@bot.message_handler(commands=['start'])
@error_handler
def start_handler(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    if chat_id in active_threads:
        active_threads[chat_id]["running"] = False
        time.sleep(3)
    active_threads[chat_id] = {"running": True, "last_sent": None}
    thread = threading.Thread(target=reminder_loop, args=(chat_id,), daemon=True)
    thread.start()
    bot.send_message(chat_id, texts[user.language]['welcome'])


def reminder_loop(chat_id):
    logger.info(f"Reminder loop started for chat_id={chat_id}")
    while active_threads.get(chat_id, {}).get("running", False):
        try:
            user = get_user(chat_id)
            reminder_times = set(user.reminder_times)
            timezone = pytz.timezone(user.timezone)
            now = datetime.datetime.now(timezone).strftime("%H:%M")
            last_sent = active_threads.get(chat_id, {}).get("last_sent")
            if now in reminder_times and now != last_sent:
                bot.send_message(chat_id, texts[user.language]["reminder"])
                active_threads[chat_id]["last_sent"] = now
            time.sleep(10)
        except Exception as e:
            logger.error(f"[reminder_loop] –û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
            time.sleep(60)
    logger.info(f"Reminder loop stopped for chat_id={chat_id}")


@bot.message_handler(commands=['set_time'])
@error_handler
def set_time_handler(message):
    chat_id = message.chat.id
    times = message.text.split()[1:]
    if not times or not all(is_valid_time(t) for t in times):
        bot.send_message(chat_id, texts[get_user(chat_id).language]['invalid_time'])
        return
    session_db = Session()
    try:
        user = session_db.query(User).filter_by(chat_id=chat_id).first()
        if not user:
            user = User(chat_id=chat_id)
            session_db.add(user)
        user.reminder_times = times
        session_db.commit()
        bot.send_message(chat_id, texts[user.language]['time_updated'])
        logger.info(f"[set_time_handler] chat_id={chat_id}, –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {times}")
    finally:
        session_db.close()


@bot.message_handler(commands=['language'])
@error_handler
def language_handler(message):
    chat_id = message.chat.id
    session_db = Session()
    try:
        user = session_db.query(User).filter_by(chat_id=chat_id).first()
        if not user:
            user = User(chat_id=chat_id)
            session_db.add(user)
        new_lang = "en" if user.language == "ru" else "ru"
        user.language = new_lang
        session_db.commit()
        bot.send_message(chat_id, texts[new_lang]['language_changed'])
    finally:
        session_db.close()


@bot.message_handler(commands=['help'])
@error_handler
def help_handler(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    bot.send_message(chat_id, texts[user.language]['help'])


@bot.message_handler(commands=['menu'])
@error_handler
def menu_handler(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    menu_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:" if user.language == "ru" else "Choose a command:"
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        types.KeyboardButton("/start"), types.KeyboardButton("/fact"),
        types.KeyboardButton("/help"), types.KeyboardButton("/set_time"),
        types.KeyboardButton("/set_timezone"), types.KeyboardButton("/language")
    )
    bot.send_message(chat_id, menu_text, reply_markup=markup)


@bot.message_handler(commands=['fact'])
@error_handler
def fact_handler(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    fact_text = ""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API Useless Facts –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞
        response = requests.get("https://uselessfacts.jsph.pl/random.json?language=en", timeout=10)
        if response.status_code == 200:
            data = response.json()
            fact_text = data.get("text", "")
        else:
            fact_text = random.choice(texts[user.language]["facts"])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞: {str(e)}", exc_info=True)
        fact_text = random.choice(texts[user.language]["facts"])

    if user.language == "ru" and fact_text:
        try:
            fact_text = GoogleTranslator(source='en', target='ru').translate(fact_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–∞–∫—Ç–∞: {str(e)}", exc_info=True)

    bot.send_message(chat_id, f"{texts[user.language]['fact']}\n{fact_text}")

    timezone = pytz.timezone(user.timezone)
    current_time = datetime.datetime.now(timezone).strftime("%H:%M")
    if chat_id in active_threads:
        active_threads[chat_id]["last_sent"] = current_time


@bot.message_handler(commands=['debug_info'])
@error_handler
def debug_info_handler(message):
    chat_id = message.chat.id
    user = get_user(chat_id)
    logger.info(f"[debug_info_handler] chat_id={chat_id}, timezone={user.timezone}, times={user.reminder_times}")
    bot.send_message(chat_id, f"–¢–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.timezone}\n–¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {user.reminder_times}")


if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
