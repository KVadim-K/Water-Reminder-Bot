import os
import logging
import threading
import datetime
import time
import random
import pytz

import telebot
from dotenv import load_dotenv
from pathlib import Path

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
env_path = Path(__file__).parent / ".env"
load_dotenv(dotenv_path=env_path)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

bot = telebot.TeleBot(TOKEN)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
REMINDER_TIMES = ["08:00", "12:30", "15:00", "18:45", "21:15"]
TIMEZONE = pytz.timezone("Europe/Moscow")
user_language = {}
active_threads = {}

# –¢–µ–∫—Å—Ç—ã
texts = {
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å –≤–æ–¥—É! –°–µ–π—á–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤: " + ", ".join(
            REMINDER_TIMES),
        "reminder": "üíß –ü–æ—Ä–∞ –≤—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã!",
        "fact": "–õ–æ–≤–∏ —Ñ–∞–∫—Ç –æ –≤–æ–¥–µ:",
        "help": (
            "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
            "/fact - –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ –≤–æ–¥–µ\n"
            "/language - –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ (ru/en)\n"
            "/test - –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        ),
        "language_changed": "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π",
        "facts": [
            "–ß–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –ø—Ä–æ–∂–∏—Ç—å –±–µ–∑ –≤–æ–¥—ã –Ω–µ –±–æ–ª–µ–µ 3-4 –¥–Ω–µ–π.",
            "–í–æ–¥–∞ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–æ–ª–æ 71% –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ó–µ–º–ª–∏.",
            "–ê–∫—É–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤–æ–¥—É –¥–ª—è –¥—ã—Ö–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∂–∞–±—Ä—ã!",
            "–í–æ–¥–∞ - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ, –≤—Å—Ç—Ä–µ—á–∞—é—â–µ–µ—Å—è –≤ –ø—Ä–∏—Ä–æ–¥–µ –≤ —Ç—Ä–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö."
        ],
    },
    "en": {
        "welcome": "Hello! I will remind you to drink water! Current schedule: " + ", ".join(REMINDER_TIMES),
        "reminder": "üíß Time to drink a glass of water!",
        "fact": "Here's a water fact:",
        "help": (
            "Available commands:\n"
            "/start - Start the bot\n"
            "/help - Show help\n"
            "/fact - Get a random water fact\n"
            "/language - Change language (ru/en)\n"
            "/test - Test reminder"
        ),
        "language_changed": "Language changed to English",
        "facts": [
            "A person can survive only 3-4 days without water.",
            "Water covers about 71% of Earth's surface.",
            "Sharks use water for breathing through gills!",
            "Water is the only substance found naturally in three states."
        ],
    }
}


def get_now():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    return datetime.datetime.now(TIMEZONE).strftime("%H:%M")


@bot.message_handler(commands=["start"])
def start_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    user_language[chat_id] = "ru"

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫
    if chat_id in active_threads:
        active_threads[chat_id]["running"] = False

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
    active_threads[chat_id] = {"running": True}
    thread = threading.Thread(
        target=reminder_loop,
        args=(chat_id,),
        daemon=True
    )
    thread.start()

    bot.send_message(chat_id, texts["ru"]["welcome"])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")


def reminder_loop(chat_id):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    last_sent = None
    while active_threads.get(chat_id, {}).get("running", False):
        try:
            now = get_now()

            if now in REMINDER_TIMES and now != last_sent:
                lang = user_language.get(chat_id, "ru")
                bot.send_message(chat_id, texts[lang]["reminder"])
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {now} –¥–ª—è {chat_id}")
                last_sent = now

                if random.random() < 0.3:
                    fact = random.choice(texts[lang]["facts"])
                    bot.send_message(chat_id, f"{texts[lang]['fact']}\n{fact}")

            time.sleep(10)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {chat_id}: {str(e)}")
            time.sleep(60)


@bot.message_handler(commands=["test"])
def test_handler(message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    chat_id = message.chat.id
    lang = user_language.get(chat_id, "ru")
    bot.send_message(chat_id, texts[lang]["reminder"])
    logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}")


@bot.message_handler(commands=["help"])
def help_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    chat_id = message.chat.id
    lang = user_language.get(chat_id, "ru")
    bot.send_message(chat_id, texts[lang]["help"])


@bot.message_handler(commands=["fact"])
def fact_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /fact"""
    chat_id = message.chat.id
    lang = user_language.get(chat_id, "ru")
    fact = random.choice(texts[lang]["facts"])
    bot.send_message(chat_id, f"{texts[lang]['fact']}\n{fact}")


@bot.message_handler(commands=["language"])
def language_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /language"""
    chat_id = message.chat.id
    current_lang = user_language.get(chat_id, "ru")
    new_lang = "en" if current_lang == "ru" else "ru"
    user_language[chat_id] = new_lang
    bot.send_message(chat_id, texts[new_lang]["language_changed"])


if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()